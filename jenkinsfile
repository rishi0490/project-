 @Library('my-shared-library') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'ImageName', description: "name of the docker build", defaultValue: 'javapp')
        string(name: 'ImageTag', description: "tag of the docker build", defaultValue: 'v1')
        string(name: 'DockerHubUser', description: "name of the Application", defaultValue: 'rishi0490')
        string(name: 'KubeNamespace', description: 'Kubernetes namespace', defaultValue: 'default')
        string(name: 'HelmReleaseName', description: 'Helm release name', defaultValue: 'myapp')
    }

    stages{
         
        stage('Git Checkout'){
                    when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/rishi0490/project-.git"
            )
            }
        }
         stage('Unit Test maven'){
         
         when { expression {  params.action == 'create' } }

            steps{
               script{
                   
                   mvnTest()
               }
            }
        }
         stage('Integration Test maven'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   mvnIntegrationTest()
               }
            }
        }
   /*     stage('Static code analysis: Sonarqube'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   def SonarQubecredentialsId = 'sonarqube-api'
                   statiCodeAnalysis(SonarQubecredentialsId)
               }
            }
        }
        stage('Quality Gate Status Check : Sonarqube'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   def SonarQubecredentialsId = 'sonarqube-api'
                   QualityGateStatus(SonarQubecredentialsId)
               }
            }
        } */
        stage('Maven Build : maven'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   mvnBuild()
               }
            }
        }
        stage('Docker Image Build'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerBuild("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
               }
            }
        }
 /*        stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageScan("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
               }
            }
        } */
        stage('Docker Image Push : DockerHub '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImagePush("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
               }
            }
        }   
        stage('Docker Image Cleanup : DockerHub '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerImageCleanup("${params.ImageName}","${params.ImageTag}","${params.DockerHubUser}")
               }
            }
        }     
 /*        stage('Kubernetes Deployment') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    kubernetesDeploy(
                        kubeconfigId: 'kubeconfig', // You need to configure this in Jenkins
                        namespace: "${params.KubeNamespace}",
                        yamlPath: 'path/to/kubernetes/deployment.yaml'
                    )
                }
            }
        }

           stage('Helm Chart Installation') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    helmChartInstall(
                        releaseName: "${params.HelmReleaseName}",
                        chartPath: 'path/to/helm/chart',
                        valuesFile: 'path/to/values.yaml'
                    )
                }
            }
        }

          
           stage('Setup Prometheus') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    setupPrometheus()
                }
            }
        }

            stage('Setup Grafana') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    setupGrafana()
                }
            }
        }

         */
    }
}
